#!/trw/local/perl/default/bin/perl 

use 5.010001;

use strict;
use warnings;

use English qw{ -no_match_vars };
use Getopt::Long 2.33 qw{ :config auto_version };
use Perl::Critic;
use Perl::Critic::Utils qw{ all_perl_files $SPACE };
use Perl::Critic::Violation;
# The following is superfluous as far as Perl::Critic is concerned, but
# handy if we want to run the debugger.
use Perl::Critic::Policy::ErrorHandling::RequireCheckedCalls;
use Readonly;
use Pod::Usage;

our $VERSION = '0.114';

Readonly::Scalar my $DEFAULT_SINGLE_FILE_FORMAT => 4;
Readonly::Scalar my $DEFAULT_MULTI_FILE_FORMAT  => 5;
Readonly::Scalar my $REF_ARRAY  => ref [];

my %opt;

GetOptions( \%opt, qw{
        check_assigns|check-assigns|assigns|assignments!
        methods=s@
        subroutines=s@
    },
    'format=s'  => \( my $format ),
    'verbose!'  => \( my $verbose ),
    help => sub { pod2usage( { -verbose => 2 } ) },
) and ( $opt{subroutines} || $opt{methods} )
    or pod2usage( { -verbose => 0 } );

foreach ( values %opt ) {
    $REF_ARRAY eq ref
        and $_ = join $SPACE, @{ $_ };
}

if ( ! @ARGV ) {
    -e 'MANIFEST'
        or die "No arguments specified and no MANIFEST found\n";
    require ExtUtils::Manifest;
    my $manifest = ExtUtils::Manifest::maniread();
    @ARGV = sort all_perl_files( keys %{ $manifest } )  ## no critic (RequireLocalizedPunctuationVars)
}

my $critic = Perl::Critic->new(
    -profile    => 'NONE',
);

$critic->add_policy(
    -policy => 'ErrorHandling::RequireCheckedCalls',
    -params => \%opt
);

{
    no warnings qw{ newline };  ## no critic (ProhibitNoWarnings)
    Perl::Critic::Violation::set_format(
        defined $format ? $format :
        ( @ARGV > 1 || -d $ARGV[0] ) ?
            $DEFAULT_MULTI_FILE_FORMAT :
            $DEFAULT_SINGLE_FILE_FORMAT
    );
}

foreach my $fn ( @ARGV ) {

    no warnings qw{ newline };  ## no critic (ProhibitNoWarnings)
    foreach my $pf ( -e $fn ? all_perl_files( $fn ) : \$fn ) {
        my @violations = Perl::Critic::Violation::sort_by_location(
            $critic->critique( $pf ) );

        if ( @violations ) {
            foreach ( @violations ) {
                print;
            }
        } elsif ( $verbose ) {
            local $_ = Perl::Critic::Violation::get_format();
            local $OUTPUT_RECORD_SEPARATOR = "\n";
            print m/ (?: \A | (?<= [^%] ) ) (?: %% )* %f /smx ?
                "$pf source OK" : 'source OK';
        }
    }
}

__END__

=for stopwords oxymoronicly

=head1 NAME

unchecked-calls - Find calls of specified subroutines and methods which are not checked

=head1 SYNOPSIS

 unchecked-calls --subroutines fubar Foo->bar lib/
 unchecked-calls -help
 unchecked-calls -version

=head1 OPTIONS

The following options are accepted by this script. They are documented
with leading double dashes, but single dashes are accepted, as are
unique abbreviations.

=head2 --format

 --format 5

This option specifies the F<perlcritic> format to use for output. This
corresponds to the F<perlcritic> C<--verbose> option, takes the same
values, and has the same default.

=head2 --help

This option displays the documentation for this script. The script then
exits.

=head2 --methods

This option specifies methods to check. It can be specified more than
once. A value of the form C<bareword> specifies the name of a method. A
value of the form C<< Class->method >> specifies a static method call on
a specific class.

At least one of C<--methods> or C<--subroutines> must be specified.

=head2 --subroutines

This option specifies subroutines to check. It can be specified more
than once. A value of the form C<bareword> specifies the name of a
subroutine or method. A value of the form C<< Class->method >> specifies
a static method call on a specific class.

At least one of C<--methods> or C<--subroutines> must be specified.

=head2 --verbose

If this Boolean option is asserted, files that have no violations are
displayed as C<'OK'>. If not, files having no violations produce no
output.

=head2 --version

This option displays the version of this script. The script then exits.

=head1 DESCRIPTION

This Perl script wraps the rogue Perl::Critic policy
L<Perl::Critic::Policy::ErrorHandling::RequireCheckedCalls|Perl::Critic::Policy::ErrorHandling::RequireCheckedCalls>.
This is a variant of C<InputOutput::RequireCheckedSyscalls> with
functionality more appropriate to user-written subroutines or methods.

If no arguments are passed, the contents of the F<MANIFEST> are scanned
-- at least, those which appear to be Perl files.

If an argument is passed which is not a file name, it is assumed to be
code to critique.

=head1 AUTHOR

Thomas R. Wyant, III F<wyant at cpan dot org>

=head1 COPYRIGHT

Copyright (C) 2012-2022 by Thomas R. Wyant, III

=head1 LICENSE

This program is free software; you can redistribute it and/or modify it
under the same terms as Perl 5.10.0. For more details, see the full text
of the licenses in the directory LICENSES.

This program is distributed in the hope that it will be useful, but
without any warranty; without even the implied warranty of
merchantability or fitness for a particular purpose.

=cut

# Local Variables:
#   mode: cperl
#   cperl-indent-level: 4
#   fill-column: 72
#   indent-tabs-mode: nil
#   c-indentation-style: bsd
# End:
# ex: set ts=8 sts=4 sw=4 tw=72 ft=perl expandtab shiftround :
